type: edu
custom_name: stage4
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    import banking.auth.Authenticator;
    import banking.auth.AuthenticatorImpl;
    import banking.repository.AccountRepository;
    import banking.repository.AccountRepositoryImpl;
    import banking.ui.UserInterface;
    import banking.ui.UserInterfaceImpl;

    public class Main {
        public static void main(String[] args) {

            AccountRepository accountRepository = new AccountRepositoryImpl();
            UserInterface userInterface = new UserInterfaceImpl();
            Authenticator authenticator = new AuthenticatorImpl(accountRepository, userInterface);

            BankingFacade bankingFacade = new BankingFacade(accountRepository, authenticator, userInterface);
            bankingFacade.start();
        }
    }
  learner_created: false
- name: src/banking/BankingFacade.java
  visible: true
  text: |
    package banking;

    import banking.account.Account;
    import banking.account.AccountManager;
    import banking.auth.Authenticator;
    import banking.helpers.Action;
    import banking.helpers.Constants;
    import banking.menu.AccountBalanceMenu;
    import banking.menu.CreateAccountMenu;
    import banking.menu.Menu;
    import banking.repository.AccountRepository;
    import banking.ui.UserInterface;

    public class BankingFacade {
        AccountRepository accountRepository = null;
        Authenticator authenticator = null;
        UserInterface userInterface = null;

        Menu createAccountMenu;
        Menu accountBalanceMenu;

        private BankingFacade() {

        }

        public BankingFacade(AccountRepository accountRepository,
                             Authenticator authenticator,
                             UserInterface userInterface
        ) {
            this.accountRepository = accountRepository;
            this.authenticator = authenticator;
            this.userInterface = userInterface;

            this.createAccountMenu = new CreateAccountMenu(this.userInterface);
            this.accountBalanceMenu = new AccountBalanceMenu(this.userInterface);

        }

        public void start() {
            this.showCreateAccountMenu();
            Action action = this.createAccountMenu.getUserInput();

            switch (action) {

                case CREATE_ACCOUNT:
                    this.createAccount();
                    break;

                case LOGIN_ACCOUNT:
                    this.loginAccount();
                    break;

                case EXIT:
                    this.exitApplication();
                    break;

            }
        }

        private void showCreateAccountMenu() {
            this.createAccountMenu.show();
        }

        private void createAccount() {
            Account account = AccountManager.newAccount();

            this.accountRepository.createAccount(account);

            this.showAccount(account);

            this.start();
        }

        private void showAccount(Account account) {
            this.prepareOutput();
            this.userInterface.println(Constants.MESSAGE_CARD_CREATED);
            this.userInterface.println(Constants.LABEL_YOUR_CARD);
            this.userInterface.println(account.getCardNumber());
            this.userInterface.println(Constants.LABEL_YOUR_PIN);
            this.userInterface.println(account.getPinCode());
        }

        private void loginAccount() {
            this.prepareOutput();

            this.userInterface.println(Constants.QUESTION_YOUR_CARD);
            String cardNumber = this.userInterface.readLine();

            this.userInterface.println(Constants.QUESTION_YOUR_PIN);
            String pinCode = this.userInterface.readLine();

            if (this.authenticator.login(cardNumber, pinCode)) {
                this.prepareOutput();
                this.userInterface.println(Constants.MESSAGE_LOGGED_IN);
                this.showAccountMenu();
            } else {
                this.prepareOutput();
                this.userInterface.println(Constants.MESSAGE_WRONG_CARD);
                this.start();
            }
        }

        private void showAccountMenu() {
            this.accountBalanceMenu.show();
            Action action = this.accountBalanceMenu.getUserInput();

            switch (action) {

                case BALANCE:
                    this.showBalance();
                    this.showAccountMenu();
                    break;

                case LOGOUT_ACCOUNT:
                    this.logoutAccount();
                    this.start();
                    break;

                case EXIT:
                    this.exitApplication();
                    break;

            }
        }

        private void showBalance() {
            Account account = this.authenticator.account();
            this.prepareOutput();
            this.userInterface.println(Constants.LABEL_BALANCE + " " + account.getBalance());
        }

        private void logoutAccount() {
            this.authenticator.logout();
            this.prepareOutput();
            this.userInterface.println(Constants.MESSAGE_LOGGED_OUT);
        }

        private void exitApplication() {
            this.prepareOutput();
            this.userInterface.println(Constants.MESSAGE_BYE);
            System.exit(0);
        }

        private void prepareOutput(){
            this.userInterface.println("");
        }
    }
  learner_created: false
- name: src/banking/menu/CreateAccountMenu.java
  visible: true
  text: |
    package banking.menu;

    import banking.helpers.Action;
    import banking.helpers.Constants;
    import banking.ui.UserInterface;

    import java.util.ArrayList;
    import java.util.List;

    public class CreateAccountMenu extends BankMenu implements Menu {

        public CreateAccountMenu(UserInterface userInterface) {
            super(userInterface);
        }

        @Override
        public List<Option> getOptionList() {

            List<Option> optionList = new ArrayList<>();

            optionList.add(new OptionImpl(Action.CREATE_ACCOUNT, Constants.MENU_CREATE_ACCOUNT));
            optionList.add(new OptionImpl(Action.LOGIN_ACCOUNT, Constants.MENU_LOG_IN));
            optionList.add(new OptionImpl(Action.EXIT, Constants.MENU_EXIT));

            return optionList;
        }


    }
  learner_created: false
- name: src/banking/menu/AccountBalanceMenu.java
  visible: true
  text: |
    package banking.menu;

    import banking.helpers.Action;
    import banking.helpers.Constants;
    import banking.ui.UserInterface;

    import java.util.ArrayList;
    import java.util.List;

    public class AccountBalanceMenu extends BankMenu implements Menu {

        public AccountBalanceMenu(UserInterface userInterface) {
            super(userInterface);
        }

        @Override
        public List<Option> getOptionList() {

            List<Option> optionList = new ArrayList<>();

            optionList.add(new OptionImpl(Action.BALANCE, Constants.MENU_BALANCE));
            optionList.add(new OptionImpl(Action.LOGOUT_ACCOUNT, Constants.MENU_LOGOUT));
            optionList.add(new OptionImpl(Action.EXIT, Constants.MENU_EXIT));

            return optionList;
        }


    }
  learner_created: false
- name: src/banking/menu/Menu.java
  visible: true
  text: |
    package banking.menu;

    import banking.helpers.Action;

    import java.util.List;

    public interface Menu {

        public List<Option> getOptions();

        public void show();

        public Action getUserInput();
    }
  learner_created: false
- name: src/banking/menu/Option.java
  visible: true
  text: |
    package banking.menu;

    import banking.helpers.Action;

    public interface Option {

        public Action getAction();
        public String getOption();
        public String toString();
    }
  learner_created: false
- name: src/banking/menu/OptionImpl.java
  visible: true
  text: |
    package banking.menu;

    import banking.helpers.Action;

    public class OptionImpl implements Option {
        private final Action action;
        private final String option;

        public OptionImpl(Action action, String option) {
            this.action = action;
            this.option = option;
        }

        @Override
        public Action getAction() {
            return this.action;
        }

        @Override
        public String getOption() {
            return this.option;
        }

        @Override
        public String toString() {
            return this.getAction().getValue() + ". " + this.getOption();
        }
    }
  learner_created: false
- name: src/banking/menu/BankMenu.java
  visible: true
  text: |
    package banking.menu;

    import banking.helpers.Action;
    import banking.helpers.Constants;
    import banking.ui.UserInterface;

    import java.util.List;
    import java.util.Optional;

    public abstract class BankMenu {

        protected UserInterface userInterface;

        public BankMenu(UserInterface userInterface) {
            this.userInterface = userInterface;
        }

        public void show() {
            this.userInterface.println("");
            for (Option option : this.getOptions()) {
                this.userInterface.println(String.valueOf(option));
            }
            this.userInterface.print(Constants.SYMBOL_INPUT);
        }

        public Action getUserInput() {
            int userInput = this.userInterface.readInt();

            Optional<Option> optionalOption = this.getOptionList().stream()
                    .filter(option -> option.getAction().getValue() == userInput)
                    .findFirst();

            return optionalOption.orElse(null).getAction();
        }

        public abstract List<Option> getOptionList();

        public List<Option> getOptions() {
            return this.getOptionList();
        }
    }
  learner_created: false
- name: src/banking/ui/UserInterface.java
  visible: true
  text: |
    package banking.ui;

    import banking.helpers.Action;
    import banking.menu.Menu;

    public interface UserInterface {

        public Action showMenu(Menu menu);

        public void println(String log);

        public void print(String log);

        public int readInt();

        public String readLine();
    }
  learner_created: false
- name: src/banking/ui/UserInterfaceImpl.java
  visible: true
  text: |
    package banking.ui;

    import banking.helpers.Action;
    import banking.menu.Menu;

    import java.util.Scanner;

    public class UserInterfaceImpl implements UserInterface {

        private final Scanner scanner = new Scanner(System.in);

        @Override
        public Action showMenu(Menu menu) {
            menu.show();

            return menu.getUserInput();
        }

        @Override
        public void println(String log) {
            System.out.println(log);
        }

        @Override
        public void print(String log) {
            System.out.print(log);
        }

        @Override
        public int readInt() {
            int nextInt = scanner.nextInt();
            // throw away the \n char,
            // https://stackoverflow.com/questions/23450524/java-scanner-doesnt-wait-for-user-input
            scanner.nextLine();

            return nextInt;
        }

        @Override
        public String readLine() {
            return scanner.nextLine();
        }
    }
  learner_created: false
- name: src/banking/account/Account.java
  visible: true
  text: |
    package banking.account;

    public interface Account {
        public double getBalance();

        public String getCardNumber();

        public String getPinCode();

        public boolean pinMatches(String pinCode);
    }
  learner_created: false
- name: src/banking/account/AccountImpl.java
  visible: true
  text: |
    package banking.account;

    public class AccountImpl implements Account {

        private final int binNumber;
        private final long accountSequence;
        private final int checkSum;
        private final int pinCode;
        private double balance;

        public AccountImpl(int binNumber, long accountSequence, int checkSum, int pinCode) {
            this.binNumber = binNumber;
            this.accountSequence = accountSequence;
            this.checkSum = checkSum;
            this.pinCode = pinCode;
            this.balance = 0;
        }

        @Override
        public double getBalance() {
            return this.balance;
        }

        @Override
        public String getCardNumber() {
            return this.binNumber + "" + this.accountSequence + "" + this.checkSum;
        }

        @Override
        public String getPinCode() {
            return String.valueOf(this.pinCode);
        }

        @Override
        public boolean pinMatches(String pinCode) {
            return String.valueOf(this.pinCode).equals(pinCode);
        }
    }
  learner_created: false
- name: src/banking/account/AccountManager.java
  visible: true
  text: |
    package banking.account;

    import java.util.Random;

    public class AccountManager {

        private static final int binNumber = 400000;
        private static long accountSequence = 100000000;

        public static Account newAccount() {

            Random random = new Random(31);

            int checkSum = random.nextInt(10);
            int pinCode = random.nextInt(9999 - 1000) + 1000;

            Account account = new AccountImpl(binNumber, accountSequence, checkSum, pinCode);

            AccountManager.accountSequence += 1;

            return account;
        }
    }
  learner_created: false
- name: src/banking/repository/AccountRepository.java
  visible: true
  text: |
    package banking.repository;

    import banking.account.Account;

    public interface AccountRepository {

        public Account createAccount(Account account);

        public Account getAccountByNumber(String accountNumber);
    }
  learner_created: false
- name: src/banking/repository/AccountRepositoryImpl.java
  visible: true
  text: |
    package banking.repository;

    import banking.account.Account;

    import java.util.HashMap;
    import java.util.Map;

    public class AccountRepositoryImpl implements AccountRepository {

        private final Map<String, Account> repository = new HashMap<>();

        @Override
        public Account createAccount(Account account) {
            this.repository.put(account.getCardNumber(), account);

            return account;
        }

        @Override
        public Account getAccountByNumber(String accountNumber) {
            return this.repository.get(accountNumber);
        }
    }
  learner_created: false
- name: src/banking/helpers/Constants.java
  visible: true
  text: |
    package banking.helpers;

    public abstract class Constants {

        public static final String MENU_CREATE_ACCOUNT  = "Create an account";
        public static final String MENU_LOG_IN  = "Log into account";
        public static final String MENU_BALANCE  = "Balance";
        public static final String MENU_LOGOUT  = "Log out";
        public static final String MENU_EXIT  = "Exit";

        public static final String MESSAGE_CARD_CREATED  = "Your card has been created";
        public static final String MESSAGE_WRONG_CARD  = "Wrong card number or PIN!";
        public static final String MESSAGE_LOGGED_IN  = "You have successfully logged in!";
        public static final String MESSAGE_LOGGED_OUT  = "You have successfully logged out!";
        public static final String MESSAGE_BYE  = "Bye!";

        public static final String LABEL_YOUR_CARD  = "Your card number:";
        public static final String LABEL_YOUR_PIN  = "Your card PIN:";
        public static final String LABEL_BALANCE  = "Balance:";

        public static final String QUESTION_YOUR_CARD  = "Enter your card number:";
        public static final String QUESTION_YOUR_PIN  = "Enter your PIN:";

        public static final String SYMBOL_INPUT  = ">";
    }
  learner_created: false
- name: src/banking/helpers/Action.java
  visible: true
  text: |
    package banking.helpers;

    public enum Action {

        CREATE_ACCOUNT(1),
        LOGIN_ACCOUNT(2),
        LOGOUT_ACCOUNT(2),
        BALANCE(1),
        EXIT(0);

        private final int value;

        private Action(int value) {
            this.value = value;
        }

        public int getValue() {
            return value;
        }
    }
  learner_created: false
- name: src/banking/auth/Authenticator.java
  visible: true
  text: |
    package banking.auth;

    import banking.account.Account;

    public interface Authenticator {

        public boolean login(String accountNumber, String pinCode);

        public void logout();

        public boolean isLoggedIn();

        public Account account();
    }
  learner_created: false
- name: src/banking/auth/AuthenticatorImpl.java
  visible: true
  text: |
    package banking.auth;

    import banking.account.Account;
    import banking.repository.AccountRepository;
    import banking.ui.UserInterface;

    public class AuthenticatorImpl implements Authenticator {

        private final AccountRepository accountRepository;
        private final UserInterface userInterface;

        private Account loggedInUser;

        public AuthenticatorImpl(AccountRepository accountRepository, UserInterface userInterface) {
            this.accountRepository = accountRepository;
            this.userInterface = userInterface;
            this.loggedInUser = null;
        }

        @Override
        public boolean login(String accountNumber, String pinCode) {
            Account account = this.accountRepository.getAccountByNumber(accountNumber);

            if (account == null || !account.pinMatches(pinCode)) {
                this.loggedInUser = null;
                return false;
            }

            this.loggedInUser = account;
            return true;
        }

        @Override
        public void logout() {
            this.loggedInUser = null;
        }

        @Override
        public boolean isLoggedIn() {
            return this.loggedInUser != null;
        }

        @Override
        public Account account() {
            return this.loggedInUser;
        }


    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.junit.AfterClass;
    import org.junit.BeforeClass;

    import java.io.File;
    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.sql.*;
    import java.util.HashMap;
    import java.util.Map;
    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final String databaseFileName = "card.s3db";
        private static final String tempDatabaseFileName = "tempDatabase.s3db";
        private static final String[] args = {"-fileName", databaseFileName};
        private static final Map<String, String> correctData = new HashMap<>();

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        private static Connection connection;


        @DynamicTest
        CheckResult test1_checkDatabaseFile() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            File file = new File(databaseFileName);

            if (!file.exists()) {
                return CheckResult.wrong("You should create a database file " +
                    "named " + databaseFileName + ". The file name should be taken from the command line arguments.\n" +
                    "The database file shouldn't be deleted after stopping the program!");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkConnection() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            getConnection();
            closeConnection();

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkIfTableExists() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                ResultSet resultSet = getConnection().createStatement().executeQuery(
                    "SELECT name FROM sqlite_master WHERE type ='table' AND name NOT LIKE 'sqlite_%';");
                while (resultSet.next()) {
                    if (resultSet.getString("name").equals("card")) {
                        closeConnection();
                        return CheckResult.correct();
                    }
                }
            } catch (SQLException e) {
                closeConnection();
                return CheckResult.wrong("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.wrong("Your database doesn't have a table named 'card'");
        }

        @DynamicTest
        CheckResult test4_checkColumns() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("PRAGMA table_info(card);");
                Map<String, String> columns = new HashMap<>();

                while (resultSet.next()) {
                    columns.put(resultSet.getString("name").toLowerCase(), resultSet.getString("type").toUpperCase());
                }

                String[][] correctColumns = {
                    {"id", "INTEGER", "INT"},
                    {"number", "TEXT", "VARCHAR"},
                    {"pin", "TEXT", "VARCHAR"},
                    {"balance", "INTEGER", "INT"}};

                for (String[] correctColumn : correctColumns) {
                    String errorMessage = "Can't find '" + correctColumn[0] + "' column with '" + correctColumn[1] + "' type.\n" +
                        "Your table should have columns described in " +
                        "the stage instructions.";
                    if (!columns.containsKey(correctColumn[0])) {
                        return CheckResult.wrong(errorMessage);
                    } else if (!columns.get(correctColumn[0]).contains(correctColumn[1]) && !columns.get(correctColumn[0]).contains(correctColumn[2])) {
                        return CheckResult.wrong(errorMessage);
                    }
                }
            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect to the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }


        @DynamicTest
        CheckResult test5_checkAddingRowsToTheTable() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            output = program.execute("1");

            if (!getData(output)) {
                return CheckResult.wrong("You should output card number and PIN like in example\n" +
                    "Or it doesn't pass the Luhn algorithm");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            try {

                ResultSet resultSet = getConnection().createStatement().executeQuery("SELECT * FROM card");
                Map<String, String> userData = new HashMap<>();

                while (resultSet.next()) {
                    System.out.println(resultSet.getString("number"));
                    if (resultSet.getString("number") == null) {
                        return CheckResult.wrong("The card number shouldn't be null in the database!");
                    }
                    if (resultSet.getInt("balance") != 0) {
                        return CheckResult.wrong("Default balance value should be 0 in the database!");
                    }
                    if (resultSet.getString("pin") == null) {
                        return CheckResult.wrong("The PIN shouldn't be null in the database!");
                    }
                    userData.put(resultSet.getString("number"), resultSet.getString("pin"));
                }

                for (Map.Entry<String, String> entry : correctData.entrySet()) {
                    if (!userData.containsKey(entry.getKey())) {
                        return CheckResult.wrong("Your database doesn't save newly created cards.");
                    } else if (!userData.get(entry.getKey()).equals(entry.getValue())) {
                        return CheckResult.wrong("Correct PIN for card number " + entry.getKey() + " should " +
                            "be " + entry.getValue());
                    }
                }


            } catch (SQLException e) {
                return CheckResult.wrong("Can't connect the database!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLogIn() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example:" +
                    " 400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is a digit.");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should be signed in after" +
                    " entering the correct card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test7_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test8_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return CheckResult.wrong("The user should not be signed in" +
                    " after entering incorrect card information.");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test9_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return CheckResult.wrong("You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);

            output = program.execute("1");

            if (!output.contains("0")) {
                return CheckResult.wrong("Expected balance: 0");
            }

            stopAndCheckIfUserProgramWasStopped(program);
            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest10_checkAddIncome() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n10000");
            stopAndCheckIfUserProgramWasStopped(program);

            int userBalance = getBalance(correctCardNumber);
            if (userBalance != 10000) {
                return CheckResult.wrong("Account balance int the database is wrong after adding income.\nExpected 10000");
            }

            program = new TestedProgram();
            program.start(args);

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            program.execute("2\n15000");
            stopAndCheckIfUserProgramWasStopped(program);

            userBalance = getBalance(correctCardNumber);
            if (userBalance != 25000) {
                return CheckResult.wrong("Account balance is wrong after adding income.\nExpected 25000");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest11_checkTransfer() {

            String incorrectCardNumber = "2000007269641764"; //Doesn't pass Luhn algorithm
            String notExistingCardNumber = "2000007269641768";

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "Your program outputs card number " +
                    "wrong.\nCard number should look like 400000DDDDDDDDDD. Where D is some digit");
            }

            String toTransferCardNumber = cardNumberMatcher.group();

            output = program.execute("1");

            cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("3\n" + incorrectCardNumber);

            if (!output.contains("mistake")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that doesn't pass the Luhn algorithm.\n You should print " +
                    "'Probably you made mistake in the card number. Please try again!'");
            }

            output = program.execute("3\n" + notExistingCardNumber);

            if (!output.contains("exist")) {
                return new CheckResult(false, "You should not allow to transfer " +
                    "to a card number that does not exist.\nYou should print " +
                    "'Such a card does not exist.'");
            }

            output = program.execute("3\n" + toTransferCardNumber + "\n100000");
            if (!output.toLowerCase().contains("not enough money")) {
                return new CheckResult(false, "You should not allow a transfer if " +
                    "there is not enough money in the account to complete it. You should print " +
                    "'Not enough money!'");
            }

            program.execute("2\n20000\n3\n" + toTransferCardNumber + "\n10000");

            stopAndCheckIfUserProgramWasStopped(program);

            int correctBalanceForBothAccounts = 10000;
            int toTransferCardBalance = getBalance(toTransferCardNumber);
            int correctCardNumberBalance = getBalance(correctCardNumber);

            if (toTransferCardBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card to which the transfer was made.");
            }

            if (correctCardNumberBalance != correctBalanceForBothAccounts) {
                return new CheckResult(false, "Incorrect account balance of the card used to make the transfer.");
            }

            return CheckResult.correct();
        }

        // ttest is not a typo!
        @DynamicTest
        CheckResult ttest12_checkTransfer() {

            deleteAllRows();

            TestedProgram program = new TestedProgram();
            program.start(args);

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2\n" + correctCardNumber + "\n" + correctPin + "\n4");

            stopAndCheckIfUserProgramWasStopped(program);

            try {
                PreparedStatement statement = getConnection().prepareStatement("SELECT * FROM card where number = ?");
                statement.setString(1, correctCardNumber);
                ResultSet resultSet = statement.executeQuery();
                if (resultSet.next()) {
                    return new CheckResult(false, "After closing the account, the card should be deleted " +
                        "from the database.");
                }
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }

            closeConnection();
            return CheckResult.correct();
        }

        private static Connection getConnection() {
            if (connection == null) {
                try {
                    connection = DriverManager.getConnection("jdbc:sqlite:" + databaseFileName);
                } catch (SQLException exception) {
                    throw new WrongAnswer("Can't connect to the database! Make sure you close your database" +
                        " connection at the end of the program!");
                }
            }
            return connection;
        }

        private static void closeConnection() {
            if (connection == null)
                return;
            try {
                connection.close();
            } catch (SQLException ignored) {
            }
            connection = null;
        }

        @BeforeClass
        public static void createTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!userDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(tempDbFile);
                Files.copy(userDbFile, tempDbFile);
            } catch (Exception ignored) {
            }
        }

        @AfterClass
        public static void deleteTempDatabase() throws IOException {

            closeConnection();

            Path userDbFile = Paths.get(databaseFileName);
            Path tempDbFile = Paths.get(tempDatabaseFileName);

            if (!tempDbFile.toFile().exists())
                return;

            try {
                Files.deleteIfExists(userDbFile);
                Files.move(tempDbFile, userDbFile);
            } catch (Exception ignored) {
            }
        }

        private boolean getData(String out) {

            Pattern cardNumberPattern = Pattern.compile("400000\\d{10}");
            Matcher cardNumberMatcher = cardNumberPattern.matcher(out);

            Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);
            Matcher pinMatcher = pinPattern.matcher(out);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return false;
            }

            String number = cardNumberMatcher.group();
            String PIN = pinMatcher.group();

            if (!checkLuhnAlgorithm(number)) {
                return false;
            }

            correctData.put(number, PIN);

            return true;
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }

        private void deleteAllRows() {
            try {
                getConnection().createStatement().execute("DELETE FROM card");
                closeConnection();
            } catch (SQLException exception) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }

        private void stopAndCheckIfUserProgramWasStopped(TestedProgram program) {
            program.execute("0");
            if (!program.isFinished()) {
                throw new WrongAnswer("After choosing 'Exit' item you should stop your program" +
                    " and close database connection!");
            }
        }

        private static int getBalance(String cardNumber) {
            try {
                PreparedStatement preparedStatement = getConnection().prepareStatement("SELECT * FROM card WHERE number = ?");
                preparedStatement.setString(1, cardNumber);
                ResultSet resultSet = preparedStatement.executeQuery();
                resultSet.next();
                int result = resultSet.getInt("balance");
                closeConnection();
                return result;
            } catch (SQLException e) {
                throw new WrongAnswer("Can't execute a query in your database! Make sure that your database isn't broken and you close your connection at the end of the program!");
            }
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/93/stages/518/implement#comment
status: Unchecked
record: -1
